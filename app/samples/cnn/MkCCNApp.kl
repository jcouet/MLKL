/**************************************************************************************************/
/*                                                                                                */
/*  Informations :                                                                                */
/*      This code is part of the project MLKL                                                     */
/*                                                                                                */
/*  Contacts :                                                                                    */
/*      couet.julien@gmail.com                                                                    */
/*                                                                                                */
/**************************************************************************************************/

require MLKL; 


operator entry() {

  String path_config = "C:/Users/Julien/Documents/Dev/MLKL/app/samples/cnn/cnn_config.mlkl";
  String path_image = 'C:/Users/Julien/Documents/Dev/MLKL/resources/mnist/4.bmp';

  // Load the configuration file and set the network layers
  MkCNNConfig config;
  MkCNNLayerInterface layers[];
  if(!config.config(path_config, layers))
    return;

  // Create the network
  MkCNNNetwork nn(config.lossFunction(), config.optimizer(), layers);
 
  // Set the initiale learning rate
  Ref<MkCNNOptimizerInterface> opti = nn.optimizer();
  nn.optimizer().learningRate(nn.optimizer().learningRate()* sqrt(config.batch_size));

  // Declare the enumeration, here we can set the larning rate decay
  // However, it should be set from the file, see Convnet for this
  MkEnumerateEpoch on_epoch_enumerate(); 
  
  // Load the training data
  //MkCNNTrainingData training_data = LoadTrainingData_MNIST(config);
  MkCNNTrainingData training_data = LoadTrainingData_CIFAR(config);
  report("train_images.size " + training_data.train_images.size());
  report("train_labels.size " + training_data.train_labels.size());
  report("tests_images.size " + training_data.test_images.size());
  report("tests_labels.size " + training_data.test_labels.size());
 
  report("training_data.train_images[0] " + training_data.train_images[0]);

  // Train the network
  // The network (the layers' weights) is tested and saved at each epch
  nn.train(training_data, config, on_epoch_enumerate);


  // Finally test it and save it
  //Float64 image_data[] = LoadValidationData_MNIST(path_image, -1.0, 1.0);
  //report(nn.predictRescale(image_data));
}

