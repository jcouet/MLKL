/**************************************************************************************************/
/*                                                                                                */
/*  Informations :                                                                                */
/*      This code is part of the project MLKL                                                     */
/*                                                                                                */
/*  Contacts :                                                                                    */
/*      couet.julien@gmail.com                                                                    */
/*                                                                                                */
/**************************************************************************************************/

require MLKL; 
 
 
function trainSVM(
  io MkSVM_MC machine,
  Float64 inputs[][],
  Float32 labels[])
{  
  report("inputs size " + inputs.size());
  report("labels size " + labels.size());

  SInt32 labels_[]; 
  Index size = labels.size();

  labels_.resize(size);
  for(Index i=0; i<size; ++i)
    labels_[i] = SInt32(labels[i]);
  
  report(labels_);
  MkSVM_MC_Learning teacher = MkSVM_MC_Learning(machine, inputs, labels_);

  // Run the learning algorithm
  Float64 error = teacher.run();
  report("error " + error);
  // Compute the decision output for one of the input vectors
  Float64 decision = machine.compute(inputs[3]);
  report("Descision " + decision);
}

operator entry() {

  SInt32 nb_classes = 4;
  
  Float64 data[][];
  data.resize(nb_classes);
  data[0].push(0); 
  data[1].push(3); 
  data[2].push(2); 
  data[3].push(1); 

  Float32 label[]; 
  label.resize(nb_classes);
  label[0] = 0;
  label[1] = 3;
  label[2] = 2;
  label[3] = 1;
   
  MkIKernel kernel = MkLinearKernel();
  MkSVM_MC machine = MkSVM_MC(data[0].size(), kernel, nb_classes);

  trainSVM(machine, data, label);
}



