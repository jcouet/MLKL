//************************************************************************************************//
//                                                                                                //
//  Code part of the project MLKL                                                                 //
//                                                                                                //
//  couet.julien@gmail.com                                                                        //
//                                                                                                //
//************************************************************************************************//

require MLKL; 


function MkCNNConfig ConfigLeNet() {
  MkCNNConfig config;

  config.save=0;
  config.gpu=0;
  config.epoch = 20;
  config.batch_size = 10;
  config.optimizer = MK_OPTIMIZER_GD;
  config.loss_function = MK_LOSS_MSE;

  config.train_images_path = "C:/Users/Julien/Documents/Dev/MLKL/resources/mnist/train-images.idx3-ubyte";
  config.test_images_path = "C:/Users/Julien/Documents/Dev/MLKL/resources/mnist/t10k-images.idx3-ubyte";
  config.train_labels_path = "C:/Users/Julien/Documents/Dev/MLKL/resources/mnist/train-labels.idx1-ubyte";
  config.test_labels_path = "C:/Users/Julien/Documents/Dev/MLKL/resources/mnist/t10k-labels.idx1-ubyte";

  return config;
}

function Boolean[] CreateConnections() {
  
  Boolean O = true;
  Boolean X = false;

  Boolean c[]; 
  c.push(O); c.push(X); c.push(X); c.push(X); c.push(O); c.push(O); c.push(O); c.push(X);  
  c.push(X); c.push(O); c.push(O); c.push(O); c.push(O); c.push(X); c.push(O); c.push(O);  
  c.push(O); c.push(O); c.push(X); c.push(X); c.push(X); c.push(O); c.push(O); c.push(O);  
  c.push(X); c.push(X); c.push(O); c.push(O); c.push(O); c.push(O); c.push(X); c.push(O);  
  c.push(O); c.push(O); c.push(O); c.push(X); c.push(X); c.push(X); c.push(O); c.push(O);  
  c.push(O); c.push(X); c.push(X); c.push(O); c.push(X); c.push(O); c.push(O); c.push(O);  
  c.push(X); c.push(O); c.push(O); c.push(O); c.push(X); c.push(X); c.push(O); c.push(O);  
  c.push(O); c.push(O); c.push(X); c.push(X); c.push(O); c.push(X); c.push(O); c.push(O);  
  c.push(X); c.push(X); c.push(O); c.push(O); c.push(O); c.push(X); c.push(X); c.push(O);  
  c.push(O); c.push(O); c.push(O); c.push(X); c.push(O); c.push(O); c.push(X); c.push(O);  
  c.push(X); c.push(X); c.push(X); c.push(O); c.push(O); c.push(O); c.push(X); c.push(X);  
  c.push(O); c.push(O); c.push(O); c.push(O); c.push(X); c.push(O); c.push(O); c.push(O);  
  return c;
}

function MkCNNLayer[] ConstructLeNet() {
  MkCNNLayer layers[];
  layers.push(MkCNNLayerConvolutional(MK_NEURON_TANH,  32, 32, 5,  1, 6));
  layers.push(MkCNNLayerAveragePooling(MK_NEURON_TANH, 28, 28, 6,  2));
  layers.push(MkCNNLayerConvolutional(MK_NEURON_TANH,  14, 14, 5,  6,  16, MkCNNConnectionTable(CreateConnections(), 6, 16)));
  layers.push(MkCNNLayerAveragePooling(MK_NEURON_TANH, 10, 10, 16, 2));
  layers.push(MkCNNLayerConvolutional(MK_NEURON_TANH,  5,  5,  5,  16, 120));
  layers.push(MkCNNLayerFully(MK_NEURON_TANH, 120, 10));
  return layers;
}

operator entry() {

  // Configure the network layers
  MkCNNConfig config = ConfigLeNet();
  MkCNNLayer layers = ConstructLeNet();
 
  // Create the network
  MkCNNNetwork nn(config.lossFunction(), config.optimizer(), layers);
  nn.display();

  // Set the initiale learning rate
  Ref<MkCNNOptimizerInterface> opti = nn.optimizer();
  nn.optimizer().learningRate(nn.optimizer().learningRate()* sqrt(config.batch_size));

  // load MNIST dataset
  MkCNNData data;
  data.loadTrainingMNIST(config);

  // Train the network
  // Here we could sate the larning rate decay
  MkEnumerateEpoch on_epoch_enumerate(); 
  nn.train(data, config, epoch_enum);


  // Finally test it  
  //String path_image = 'C:/Users/Julien/Documents/Dev/MLKL/data/mnist/4.bmp';
  //Float64 image_data[] = LoadImage(path_image, -1.0, 1.0);
}
