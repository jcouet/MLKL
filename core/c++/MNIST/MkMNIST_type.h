#ifndef __KL2EDK_AUTOGEN_MkMNIST_type__
#define __KL2EDK_AUTOGEN_MkMNIST_type__

#ifdef KL2EDK_INCLUDE_MESSAGES
  #pragma message ( "Including 'MkMNIST_type.h'" )
#endif

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by kl2edk version 1.15.2
////////////////////////////////////////////////////////////////

#include <FabricEDK.h>
#if FABRIC_EDK_VERSION_MAJ != 1 || FABRIC_EDK_VERSION_MIN != 15
# error "This file needs to be rebuilt for the current EDK version!"
#endif

#include "global.h"

namespace Fabric { namespace EDK { namespace KL {

// KL object 'MkMNIST'
// Defined at MkMNIST.kl:12:1

class MkMNIST
{
protected:
  
  struct Bits;
  Bits *m_bits;
  
  friend struct Traits< MkMNIST >;
  
  static void ConstructEmpty( MkMNIST *self );
  
  static void ConstructCopy( MkMNIST *self, MkMNIST const *other );
  
  static void AssignCopy( MkMNIST *self, MkMNIST const *other );
  
  static void Destruct( MkMNIST *self );
  
public: 
  
  typedef MkMNIST &Result;
  typedef MkMNIST const &INParam;
  typedef MkMNIST &IOParam;
  
  MkMNIST();
  
  static MkMNIST Create();
  
  MkMNIST( MkMNIST const &that );
  
  MkMNIST &operator =( MkMNIST const &that );
  
  ~MkMNIST();
  
  void appendDesc( String::IOParam string ) const;
  uint32_t getRefCount() const;
  Type getType() const;
  
  bool isValid() const;
  
  operator bool() const;
  
  bool operator !() const;
  
  Bits *operator ->();
  
  Bits const *operator ->() const;
  
  bool operator ==( INParam that );
  
  bool operator !=( INParam that );
  
  // Methods for 'Object'
};

inline void Traits<MkMNIST>::ConstructEmpty( MkMNIST &val )
{
  MkMNIST::ConstructEmpty( &val );
}
inline void Traits<MkMNIST>::ConstructCopy( MkMNIST &lhs, MkMNIST const &rhs )
{
  MkMNIST::ConstructCopy( &lhs, &rhs );
}
inline void Traits<MkMNIST>::AssignCopy( MkMNIST &lhs, MkMNIST const &rhs )
{
  MkMNIST::AssignCopy( &lhs, &rhs );
}
inline void Traits<MkMNIST>::Destruct( MkMNIST &val )
{
  MkMNIST::Destruct( &val );
}

}}}

#endif // __KL2EDK_AUTOGEN_MkMNIST_type__
