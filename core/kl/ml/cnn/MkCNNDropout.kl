/**************************************************************************************************/
/*                                                                                                */
/*  Informations :                                                                                */
/*      This code is part of the project MLKL                                                     */
/*                                                                                                */
/*  Contacts :                                                                                    */
/*      couet.julien@gmail.com                                                                    */
/*                                                                                                */
/**************************************************************************************************/

require MLKL; 

/**
  The AlembicArchiveReader is a wrapper for the AlembicIArchive. 
  It provides access to the higher level reader objects such as the AlembicXformReader.
  \example

  require MLKL;

  operator entry() {
    
  }

  \endexample
*/


/**************************************************************************************************/
/*                                               None filter                                      */
/// Interface for filters
interface MkCNNFilterInterface {
  Float64 dropoutRate();
  dropoutRate!(Float64 rate);
  Index mode();
  Index context();
  context!(Index context);
  shuffle!();
  endBatch!();
  Float64[] filterFProp!(Float64 outs[], Index index);
  Float64[] filterBProp!(Float64 delta[], Index index);
};

/// Class for no-filter ~ base class 
object MkCNNFilterNone : MkCNNFilterInterface {};

/// Constructor
function MkCNNFilterNone(Index out_size) {}

/// Return the drop-out rate
public Float64 MkCNNFilterNone.dropoutRate() {
  return 0.0;
}

/// Set drop-out rate
public MkCNNFilterNone.dropoutRate!(Float64 rate) {}

/// Return the filter mode
public Index MkCNNFilterNone.mode() {
  return this.mode;
}

/// Return the context
public Index MkCNNFilterNone.context() {
  return 0;
}

/// Set the context
public MkCNNFilterNone.context!(Index context) {}

/// \Internal
private MkCNNFilterNone.shuffle!() {}

public MkCNNFilterNone.endBatch!() {}

/// Do nothing
public Float64[] MkCNNFilterNone.filterFProp!(Float64 outs[], Index index) {
  return outs;
}

/// Do nothing
public Float64[] MkCNNFilterNone.filterBProp!(Float64 delta[], Index index) {
  return delta;
}
/*                                               None filter                                      */
/**************************************************************************************************/

                                          /***********************/

/**************************************************************************************************/
/*                                             Drop-out filter                                    */
const Index DROPOUT_CONTEXT_TRAIN_PHASE = 0;
const Index DROPOUT_CONTEXT_TEST_PHASE  = 1;
const Index DROPOUT_MODE_PER_DATA       = 0;
const Index DROPOUT_MODE_PER_BATCH      = 1;


/// Class for drop-out layer 
object MkCNNDropout : MkCNNFilterInterface {
  private MkCCNDefs defs;
  private Index out_size;
  private Index mask[];
  private Float64 masked_out[][];
  private Float64 masked_delta[][];
  private Index context;
  private Index mode;
  private Float64 dropout_rate;
};

/// Constructor
function MkCNNDropout(Index out_size) {
  this.out_size = out_size;
  this.context = DROPOUT_CONTEXT_TRAIN_PHASE;
  this.mode = DROPOUT_MODE_PER_DATA;
  this.dropout_rate = 0.5;
  this.mask.resize(out_size);

  this.masked_out.resize(this.defs.taskSize());
  this.masked_delta.resize(this.defs.taskSize());
  for (Index i=0; i<this.defs.taskSize(); i++) 
  {
    this.masked_out[i].resize(out_size);
    this.masked_delta[i].resize(out_size);
  }
  this.shuffle();
}

/// Return drop-out rate
public Float64 MkCNNDropout.dropoutRate() {
  return this.dropout_rate;
}

/// Set drop-out rate
public MkCNNDropout.dropoutRate!(Float64 rate) {
  if(rate < 0.0 || rate >= 1.0) return;
  this.dropout_rate = rate;
}

/// Return the filter mode
public Index MkCNNDropout.mode() {
  return this.mode;
}

/// Set the context
public Index MkCNNDropout.context() {
  return this.context;
}

/// Return the context
public MkCNNDropout.context!(Index context) {
  this.context = context;
}

/// \Internal
private MkCNNDropout.shuffle!() {
  for(Index i=0; i<this.mask.size(); ++i)
    Bernoulli(1.0 - this.dropout_rate, this.mask[i]);
}

public MkCNNDropout.endBatch!() {
  if(this.mode == DROPOUT_MODE_PER_BATCH) 
    this.shuffle();
}

/// Return the mask output vector
public Float64[] MkCNNDropout.filterFProp!(Float64 outs[], Index index) {

  if (this.context == DROPOUT_CONTEXT_TRAIN_PHASE) 
  {
    for (Index i = 0; i < this.out_size; i++)
      this.masked_out[index][i] = outs[i] * this.mask[i];
  }

  else if(this.context == DROPOUT_CONTEXT_TEST_PHASE) 
  {
    for (Index i = 0; i < this.out_size; i++)
      this.masked_out[index][i] = outs[i] * this.dropout_rate;
  }

  return this.masked_out[index];
}

/// Return the mask delta
public Float64[] MkCNNDropout.filterBProp!(Float64 delta[], Index index) {
  
  for (Index i = 0; i < this.out_size; i++)
    this.masked_delta[index][i] = delta[i] * this.mask[i];

  if (this.mode == DROPOUT_MODE_PER_BATCH) 
    this.shuffle();

  return this.masked_delta[index];
}
/*                                             Drop-out filter                                    */
/**************************************************************************************************/

 