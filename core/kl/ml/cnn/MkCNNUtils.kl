/**************************************************************************************************/
/*                                                                                                */
/*  Informations :                                                                                */
/*      This code is part of the project MLKL                                                     */
/*                                                                                                */
/*  Contacts :                                                                                    */
/*      couet.julien@gmail.com                                                                    */
/*                                                                                                */
/**************************************************************************************************/

require Math;
require MkMNIST;
require MLKL; 


/**************************************************************************************************/
/*                                                  Config                                        */
struct MkCCNConfig {
  Index task_size;
  Boolean parallelize;
};

function MkCCNConfig() { 
  this.task_size = 1;
  this.parallelize = true;
}

function Index MkCCNConfig.taskSize() {
  return this.task_size;
}

function Boolean MkCCNConfig.parallelize() { 
  return this.parallelize;
}
/*                                                  Config                                        */
/**************************************************************************************************/

                                          /***********************/

/**************************************************************************************************/
/*                                               Image indexes                                    */
struct MkCNNIndex3D {
  Index width;
  Index height;
  Index depth;
};

function MkCNNIndex3D(
  Index width, 
  Index height, 
  Index depth) 
{
  this.width = width; 
  this.height = height; 
  this.depth = depth;  
}

function Index MkCNNIndex3D.index(
  Index x, 
  Index y, 
  Index channel) 
{
  return (this.width * this.height) * channel + this.width * y + x;
}

function Index MkCNNIndex3D.size() {
  return this.width * this.height * this.depth;
}
/*                                               Image indexes                                    */
/**************************************************************************************************/

                                          /***********************/

/**************************************************************************************************/
/*                                            Layers connection                                   */
// Connection def
struct MkCNNIndexPair {
  Index first;
  Index second;
};

function MkCNNIndexPair(Index first, Index second) {
  this.first = first;
  this.second = second;
}

struct MkCNNConnection { 
  MkCNNIndexPair pairs[];
};

function MkCNNConnection() {
  this.pairs.resize(0);
}

function MkCNNConnection.push!(MkCNNIndexPair pair) {
  this.pairs.push(pair);
}

function Index MkCNNConnection.size() {
  return this.pairs.size();
}

function Index MkCNNConnection.empty() {
  return (this.pairs.size() == 0);
}


// Connection table
struct MkCNNConnectionTable {
  Index rows;
  Index cols;
  Boolean connected[];
};

function MkCNNConnectionTable() {
  this.rows = 0;
  this.cols = 0;
  this.connected.resize(0);
}

function MkCNNConnectionTable(
  Boolean ar[], 
  Index rows, 
  Index cols) 
{
  this.rows = rows;
  this.cols = cols;
  this.connected = ar.clone();
}

public Index MkCNNConnection.first(Index pair_index) {
  return this.pairs[pair_index].first;
}

public Index MkCNNConnection.second(Index pair_index) {
  return this.pairs[pair_index].second;
}

function MkCNNConnection.first!(Index pair_index, Index first) {
  this.pairs[pair_index].first = first;
}

function MkCNNConnection.second!(Index pair_index, Index second) {
  this.pairs[pair_index].second = second;
}

function Boolean MkCNNConnectionTable.isConnected(Index i, Index j) {
  return this.isEmpty() ? true : this.connected[j * this.cols + i];
}

function Boolean MkCNNConnectionTable.isEmpty() {
  return this.rows == 0 && this.cols == 0;
}
/*                                            Layers connection                                   */
/**************************************************************************************************/

                                          /***********************/

/**************************************************************************************************/
/*                                                 Outputs                                        */
// Hash table
struct MkHashTable {
  Float64 values[];
};

function MkHashTable() {
  this.values.resize(0);
}

function MkHashTable(Float64 values[]) {
  this.values = values;
}

function Boolean == (MkHashTable lhs, MkHashTable rhs) {
  if(lhs.values.size() != rhs.values.size()) return false;

  for(Index i=0; i<lhs.values.size(); ++i)
    if(lhs.values[i] != rhs.values[i]) return false;

  return true;
}

function MkHashTable.clear!() {
  this.values.resize(0);
}


// Structure contraining the result of the learning
struct MkCNNNetworkResult {
  Index num_success;
  Index num_total;

  //http://www2.cs.uregina.ca/~dbd/cs831/notes/confusion_matrix/confusion_matrix.html
  Float64 confusion_matrix[][];
  //std::map<label_t, std::map<label_t, Inde> > confusion_matrix;
};

function MkCNNNetworkResult(Index num_success, Index num_total) {
  this.num_success = num_success;
  this.num_total = num_total;
}

function MkCNNNetworkResult() {
  this.num_success = 0;
  this.num_total = 0;
}
 
function Float64 MkCNNNetworkResult.accuracy() {
  return this.num_success * 100.0 / this.num_total;
}

function MkCNNNetworkResult.printSummary() {
  report("accuracy : " + this.accuracy() + "% (" + this.num_success + "/" + this.num_total);
}

function MkCNNNetworkResult.printDetail() {
  this.printSummary();
  /*
    auto all_labels = labels();

    os << std::setw(5) << "*" << " ";
    for (auto c : all_labels) 
        os << std::setw(5) << c << " ";
    os << std::endl;

    for (auto r : all_labels) {
        os << std::setw(5) << r << " ";           
        for (auto c : all_labels) 
            os << std::setw(5) << confusion_matrix[r][c] << " ";
        os << std::endl;
    }
  }

  std::set<label_t> labels() const {
    std::set<label_t> all_labels;
    for (auto r : confusion_matrix) {
      all_labels.insert(r.first);
      for (auto c : r.second)
        all_labels.insert(c.first);
    }
    return all_labels;
  }
  */
}


// Display iteration info 
struct MkEnumerateData {
  Index training_size;
  Index current_size;
  Index batch_size;
};

function MkEnumerateData(Index training_size, Index batch_size) {
  this.training_size = training_size;
  this.batch_size = batch_size;
  this.current_size = 0;
}

function MkEnumerateData.reset!() {
  this.current_size = 0;
  this.display();
}

function MkEnumerateData.display() {
  Float32 percent = 100.0 * this.batch_size * Float32(this.current_size) / Float32(this.training_size); 
  report("percent " + percent + "%\r");
}

function MkEnumerateData.update!() {
  this.current_size++;
  this.display();
}


// Display epoch info 
struct MkEnumerateEpoch {
  UInt64 start;
  Float64 decay_learning_rate;
};

function MkEnumerateEpoch() {
  this.start = getCurrentTicks();
  this.decay_learning_rate = 0.85;
}

function MkEnumerateEpoch(Float64 decay_learning_rate) {
  this.start = getCurrentTicks();
  this.decay_learning_rate = decay_learning_rate;
}

function MkEnumerateEpoch.display(
  io Ref<MkCNNNetwork> nn,
  Float64 test_images[][],
  Index test_labels[]) 
{
  Float32 tim = Float32(getCurrentTicks() - this.start)/0.0166666667;
  report(tim + " mins elapsed.");
  MkCNNNetworkResult res = nn.test(test_images, test_labels);
  Ref<MkCNNOptimizerInterface> opti = nn.optimizer();
  report(opti.learningRate() + " ," + res.num_success + "/" + res.num_total);
}

function MkEnumerateEpoch.update!(
  io Ref<MkCNNNetwork> nn,
  Float64 test_images[][],
  Index test_labels[]) 
{
  this.display(nn, test_images, test_labels);
  Ref<MkCNNOptimizerInterface> opti = nn.optimizer();
  opti.learningRate(opti.learningRate()*this.decay_learning_rate);
  opti.learningRate(Math_max(0.00001, opti.learningRate()));
}
/*                                                 Outputs                                        */
/**************************************************************************************************/