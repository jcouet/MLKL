/**************************************************************************************************/
/*                                                                                                */
/*  Informations :                                                                                */
/*      This code is part of the project MLKL                                                     */
/*                                                                                                */
/*  Contacts :                                                                                    */
/*      couet.julien@gmail.com                                                                    */
/*                                                                                                */
/**************************************************************************************************/

require MLKL;


/**************************************************************************************************/
/*                                             Gaussian Kernel                                    */
interface MkSVMKernelInterface {
  Float64 func!(Float64 x[], Float64 y[]);
};

interface MkSVMDistanceInterface {
  Float64 distance!(Float64 x[], Float64 y[]);
};

object MkGaussianKernel : MkSVMKernelInterface, MkSVMDistanceInterface { 
  Float64 sigma;
  Float64 gamma;
};

function MkGaussianKernel(Float64 sigma) {
  this.sigma(sigma);
}

function MkGaussianKernel.sigma!(Float64 sigma) {
  this.sigma = sigma;
  this.gamma = 1.0 / (2.0 * sigma * sigma);
}

function MkGaussianKernel.gamma!(Float64 gamma) {
  this.gamma = gamma;
  this.sigma = sqrt(1.0 / (gamma * 2.0));
}

function Float64 MkGaussianKernel.func!(Float64 x[], Float64 y[]) {
  Float64 norm = 0.0, d;
  for (Index i = 0; i < x.size(); i++)
  {
    d = x[i] - y[i];
    norm += d * d;
  }
  return exp(norm * - this.gamma);
}

function Float64 MkGaussianKernel.distance!(Float64 x[], Float64 y[]) {
  Float64 norm = 0.0, d;
  for (Index i = 0; i < x.size(); i++)
  {
    d = x[i] - y[i];
    norm += d * d;
  }
  // TODO: Verify the use of log1p instead
  return (1.0 / - this.gamma) * log(1.0 - 0.5 * norm);
}

// Computes the distance in input space given a distance computed in feature space.
function Float64 MkGaussianKernel.distance!(Float64 df) {
  return (1.0 / - this.gamma) * log(1.0 - 0.5 * df);
}
/*                                             Gaussian Kernel                                    */
/**************************************************************************************************/

                                          /***********************/

/**************************************************************************************************/
/*                                              Linear Kernel                                     */
object MkLinearKernel : MkSVMKernelInterface, MkSVMDistanceInterface { 
  Float64 constant;
};

function MkLinearKernel.constant!(Float64 constant) {
  this.constant = constant;
}

function MkLinearKernel() {
  this.constant(0);
}

function Float64 MkLinearKernel.func!(Float64 x[], Float64 y[]) {
  Float64 sum = 0.0;
  for (Index i = 0; i < x.size(); i++)
    sum += x[i] * y[i];
  return sum + this.constant;
}

function Float64 MkLinearKernel.distance!(Float64 x[], Float64 y[]) {
  return this.func(x, x) + this.func(y, y) - 2.0 * this.func(x, y);
}
/*                                              Linear Kernel                                     */
/**************************************************************************************************/


