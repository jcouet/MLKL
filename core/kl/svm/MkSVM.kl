/**************************************************************************************************/
/*                                                                                                */
/*  Informations :                                                                                */
/*      This code is part of the project MLKL                                                     */
/*                                                                                                */
/*  Contacts :                                                                                    */
/*      couet.julien@gmail.com                                                                    */
/*                                                                                                */
/**************************************************************************************************/

require Math;
require MLKL; 


/**************************************************************************************************/
/*                                          Support Vector Machine                                */
interface MkSVMInterface {
  Float64 compute!(Float64 inputs[]);
  Float64[] compute!(Float64 inputs[][]);
  resize!(Index size);
  setSupportVectors!(Index index, Float64 inputs[]);
  setWeights!(Index index, Float64 weight);
  setThreshold!(Float64 threshold);
  Float64 func!(Float64 x[], Float64 y[]);
};

object MkSVM : MkSVMInterface { 
  Index input_count;
  Float64 support_vectors[][];
  Float64 weights[];
  Float64 threshold;
  MkSVMKernelInterface kernel;
};

function MkSVM(Float64 input_count) {
  this.kernel = MkLinearKernel();
  this.input_count = input_count;
}

function Float64 MkSVM.compute!(Float64 inputs[]) {
  Float64 s = this.threshold;
  for(Index i=0; i<this.support_vectors.size(); ++i)
  {
    Float64 p = 0;
    for(Index j = 0; j < inputs.size(); j++)
      p += this.support_vectors[i][j] * inputs[j];
    s += this.weights[i] * p;
  }
  return s;
}

function Float64[] MkSVM.compute!(Float64 inputs[][]) {
  Float64 outputs[];
  outputs.resize(inputs.size());
  for(Index i = 0; i < inputs.size(); i++)
    outputs[i] = this.compute(inputs[i]);
  return outputs;
}

function MkSVM.resize!(Index size) {
  this.support_vectors.resize(size);
  this.weights.resize(size);
}

function MkSVM.setSupportVectors!(Index index, Float64 inputs[]) {
  this.support_vectors[index] = inputs;
}    

function MkSVM.setWeights!(Index index, Float64 weight) {
  this.weights[index] = weight;
}

function MkSVM.setThreshold!(Float64 threshold) {
  this.threshold = threshold;
}

function Float64 MkSVM.func!(Float64 x[], Float64 y[]) {
  return this.kernel.func(x, y);
}
/*                                          Support Vector Machine                                */
/**************************************************************************************************/

                                          /***********************/

/**************************************************************************************************/
/*                                       Kernel Support Vector Machine                            */
object MkKSVM : MkSVMInterface { 
  Index input_count;
  Float64 support_vectors[][];
  Float64 weights[];
  Float64 threshold;
  MkSVMKernelInterface kernel;
};

function MkKSVM(MkSVMKernelInterface kernel, Float64 input_count) {
  this.kernel = kernel;
  this.input_count = input_count;
}

function Float64 MkKSVM.compute!(Float64 inputs[]) {
  Float64 s = this.threshold;
  for (Index i = 0; i < this.support_vectors.size(); i++)
    s += this.weights[i] * this.kernel.func(this.support_vectors[i], inputs);
  return s;
}

function Float64[] MkKSVM.compute!(Float64 inputs[][]) {
  Float64 outputs[];
  outputs.resize(inputs.size());
  for(Index i = 0; i < inputs.size(); i++)
    outputs[i] = this.compute(inputs[i]);
  return outputs;
}

function MkKSVM.resize!(Index size) {
  this.support_vectors.resize(size);
  this.weights.resize(size);
}

function MkKSVM.setSupportVectors!(Index index, Float64 inputs[]) {
  this.support_vectors[index] = inputs.clone();
}    

function MkKSVM.setWeights!(Index index, Float64 weight) {
  this.weights[index] = weight;
}

function MkKSVM.setThreshold!(Float64 threshold) {
  this.threshold = threshold;
}

function Float64 MkKSVM.func!(Float64 x[], Float64 y[]) {
  return this.kernel.func(x, y);
}
/*                                       Kernel Support Vector Machine                            */
/**************************************************************************************************/
