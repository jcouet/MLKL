/**************************************************************************************************/
/*                                                                                                */
/*  Informations :                                                                                */
/*      This code is part of the project MLKL                                                     */
/*                                                                                                */
/*  Contacts :                                                                                    */
/*      couet.julien@gmail.com                                                                    */
/*                                                                                                */
/**************************************************************************************************/

require FileIO, Util;
require MLKL; 

/**
  The AlembicArchiveReader is a wrapper for the AlembicIArchive. 
  It provides access to the higher level reader objects such as the AlembicXformReader.
  \example

  require MLKL;

  operator entry() {}

  \endexample
*/

/**************************************************************************************************/
/*                                          Activation functions                                  */
/// Parse the layers configuration parameter relative to the activation function
inline Boolean ParseNeuron(
  String line, 
  io Index neuron_func)
{
  if(line == "id") { 
    neuron_func = MK_NEURON_IDENTITY; 
    return true; 
  }
  else if(line == "sig") { 
    neuron_func = MK_NEURON_SIGMOID; 
    return true; 
  }
  else if(line == "relu") {
    neuron_func = MK_NEURON_RECTIFIEDLINEAR; 
    return true; 
  }
  else if(line == "tanh") { 
    neuron_func = MK_NEURON_TANH; 
    return true; 
  }
  else return false;
}

/// Parse a string input
inline String ParseStr(String template, String line) {
  return line.subString(line.find(template) + String(template).length(), line.length());
}

/// Parse a interger input
inline Index ParseInt(String template, String line) {
  String str = ParseStr(template, line);
  return Index(str.toInteger());
}

/// Parse a scalar input
inline Float32 ParseScalar(String template, String line) {
  String str = ParseStr(template, line);
  return Float32(str.toScalar());
}

// Struct to temporary hold the layers' parameters
struct MkCNNLayerParams {
  String name;
  Float32 epsW;
  Float32 epsB;
  Float32 momW;
  Float32 momB;
  Float32 wc;
};

/// Parse the layers configuration and create them
inline Boolean ParseLayerPooling(
  String layer_name,
  io TextReader reader,
  io MkCNNLayerInterface layers[]) 
{
  Index pool_type, neuron_func, in_size;
  Index in_channels, pooling_size, params_counter = 0;
  Float32 init_w, init_b;

  String line = reader.readLine();
  if(line.find("pool=") > -1) {
    String str = ParseStr("pool=", line);
    if(str == "avg") {
      pool_type = 0;
      params_counter ++;    
    }
    else if(str == "max") {
      pool_type = 1;
      params_counter ++;    
    }
    line = reader.readLine();
  }
  if(line.find("neuron=") > -1) {
    String str = ParseStr("neuron=", line);
    if(ParseNeuron(str, neuron_func)) 
      params_counter ++;    
    line = reader.readLine();
  }
  if(line.find("filters=") > -1) {
    in_size = ParseInt("filters=", line);
    params_counter ++; line = reader.readLine();  
  }
  if(line.find("inChannels=") > -1) {
    in_channels = ParseInt("inChannels=", line);
    params_counter ++; line = reader.readLine();    
  }
  if(line.find("poolingSize=") > -1) {
    pooling_size = ParseInt("poolingSize=", line);
    params_counter ++; line = reader.readLine();    
  }
  if(line.find("initW=") > -1) {
    init_w = ParseScalar("initW=", line);
    params_counter ++; line = reader.readLine();      
  }
  if(line.find("initB=") > -1) {
    init_b = ParseScalar("initB=", line);
    params_counter ++; line = reader.readLine();      
  }
 
  report("\n--- Pooling " + layer_name + " ---");
  if(params_counter != 7) {
    report("Error, wrong parameter order");
    return false;
  }
  else {
    report("pool          : " + pool_type);
    report("neuron        : " + neuron_func);
    report("inSize        : " + in_size);
    report("inChannels    : " + in_channels);
    report("poolingSize   : " + pooling_size);
    report("initW         : " + init_w);
    report("initB         : " + init_b);

    if(pool_type == 0)
      layers.push(MkCNNLayerAveragePooling(
        layer_name, neuron_func,in_size, in_size,  
        in_channels, pooling_size, init_w, init_b));
    else
      layers.push(MkCNNLayerMaxPooling(
        layer_name, neuron_func,in_size, in_size,  
        in_channels, pooling_size, init_w, init_b));

    return true;
  }
}

/// Parse the layers configuration and create them
inline Boolean ParseLayerConvolutional(
  String layer_name,
  MkCNNLayerParams layer_params,
  io TextReader reader, 
  io MkCNNLayerInterface layers[]) 
{
  Index neuron_func, in_size, window_size;
  Index in_channels, out_channels, params_counter = 0;
  Float32 init_w, init_b;

  String line = reader.readLine();
  if(line.find("neuron=") > -1) {
    String str = ParseStr("neuron=", line);
    if(ParseNeuron(str, neuron_func)) 
      params_counter ++;    
    line = reader.readLine();
  }
  if(line.find("filters=") > -1) {
    in_size = ParseInt("filters=", line);
    params_counter ++; line = reader.readLine();  
  }
  if(line.find("filterSize=") > -1) {
    window_size = ParseInt("filterSize=", line);
    params_counter ++; line = reader.readLine();    
  }
  if(line.find("inChannels=") > -1) {
    in_channels = ParseInt("inChannels=", line);
    params_counter ++; line = reader.readLine();    
  }
  if(line.find("outChannels=") > -1) {
    out_channels = ParseInt("outChannels=", line);
    params_counter ++; line = reader.readLine();    
  }
  if(line.find("initW=") > -1) {
    init_w = ParseScalar("initW=", line);
    params_counter ++; line = reader.readLine();      
  }
  if(line.find("initB=") > -1) {
    init_b = ParseScalar("initB=", line);
    params_counter ++; line = reader.readLine();      
  }

  report("\n--- Convolutional " + layer_name + " ---");
  if(params_counter != 7) {
    report("Error, wrong parameter order");
    return false;
  }
  else {
    String space;
    Index max_length = 8;
    String neuron_func_str = String(neuron_func);
    String in_size_str = String(in_size);
    String window_size_str = String(window_size);
    String in_channels_str = String(in_channels);
    String out_channels_str = String(out_channels);

    neuron_func_str += space.whiteSpace(max_length - neuron_func_str.length());
    in_size_str += space.whiteSpace(max_length - in_size_str.length());
    window_size_str += space.whiteSpace(max_length - window_size_str.length());
    in_channels_str += space.whiteSpace(max_length - in_channels_str.length());
    out_channels_str += space.whiteSpace(max_length - out_channels_str.length());

    report("neuron      : " + neuron_func_str   + "epsW : " + layer_params.epsW);
    report("inSize      : " + in_size_str       + "epsB : " + layer_params.epsB);
    report("windowSize  : " + window_size_str   + "momW : " + layer_params.momW);
    report("inChannels  : " + in_channels_str   + "momB : " + layer_params.momB);
    report("outChannels : " + out_channels_str  + "wc   : " + layer_params.wc);
    report("initW       : " + init_w);
    report("initB       : " + init_b);

    layers.push(MkCNNLayerConvolutional(
      layer_name, neuron_func,
      in_size, in_size, window_size,  
      in_channels, out_channels, init_w, init_b));

    return true;
  }
}
 
/// Parse the layers configuration and create them
inline Boolean ParseLayerFully(
  String layer_name,
  MkCNNLayerParams layer_params,
  io TextReader reader, 
  io MkCNNLayerInterface layers[]) 
{
  Index neuron_func, in_channels, out_channels, params_counter = 0;
  Float32 init_w, init_b;

  String line = reader.readLine();
  if(line.find("neuron=") > -1) {
    String str = ParseStr("neuron=", line);
    if(ParseNeuron(str, neuron_func)) 
      params_counter ++;    
    line = reader.readLine();
  }
  if(line.find("inChannels=") > -1) {
    in_channels = ParseInt("inChannels=", line);
    params_counter ++; line = reader.readLine();    
  }
  if(line.find("outChannels=") > -1) {
    out_channels = ParseInt("outChannels=", line);
    params_counter ++; line = reader.readLine();    
  }
  if(line.find("initW=") > -1) {
    init_w = ParseScalar("initW=", line);
    params_counter ++; line = reader.readLine();      
  }
  if(line.find("initB=") > -1) {
    init_b = ParseScalar("initB=", line);
    params_counter ++; line = reader.readLine();      
  }

  report("\n--- Fully-Connected " + layer_name + " ---");
  if(params_counter != 5) {
    report("Error, wrong parameter order");
    return false;
  }
  else {

    String space;
    Index max_length = 8;
    String neuron_func_str = String(neuron_func);
    String in_channels_str = String(in_channels);
    String out_channels_str = String(out_channels);
    String init_w_str = String(init_w);
    String init_b_str = String(init_b);

    neuron_func_str += space.whiteSpace(max_length - neuron_func_str.length());
    in_channels_str += space.whiteSpace(max_length - in_channels_str.length());
    out_channels_str += space.whiteSpace(max_length - out_channels_str.length());
    init_w_str += space.whiteSpace(max_length - init_w_str.length());
    init_b_str += space.whiteSpace(max_length - init_b_str.length());

    report("neuron      : " + neuron_func_str   + "epsW : " + layer_params.epsW);
    report("inChannels  : " + in_channels_str   + "epsB : " + layer_params.epsB);
    report("outChannels : " + out_channels_str  + "momW : " + layer_params.momW);
    report("initW       : " + init_w_str        + "momB : " + layer_params.momB);
    report("initB       : " + init_b_str        + "wc   : " + layer_params.wc);

    layers.push(MkCNNLayerFully(layer_name, neuron_func, 
      in_channels, out_channels, init_w, init_b));

    return true;
  }
}

/// TO-complete, uses the parameters for the optimization
/// Parse the layers configuration and create them
inline Boolean ParseLayersDefs(
  String path_def, 
  MkCNNLayerParams layers_params[], 
  io MkCNNLayerInterface layers[]) 
{
  TextReader reader();
  if(!reader.open(path_def)) 
    return false;

  while(!reader.eof()) 
  {
    String line = reader.readLine();
 
    // Pass comment
    if(line[0] == "#") 
      line = reader.readLine();

    // If we hit a new layer
    if(line[0] == "[")
    {
      String layer_name = line;
      String layer_type = reader.readLine();

      MkCNNLayerParams layer_params;
      for(Index p=0; p<layers_params.size(); ++p)
        if(layers_params[p].name == layer_name)
          layer_params = layers_params[p];
      
      if(layer_type == "type=pool") 
      {
        if(!ParseLayerPooling(layer_name, reader, layers)) 
          return false;
      }
      else if(layer_type == "type=conv") 
      {
        if(!ParseLayerConvolutional(layer_name, layer_params, reader, layers)) 
          return false;
      }
      
      else if(layer_type == "type=fc") 
      {
        if(!ParseLayerFully(layer_name, layer_params, reader, layers)) 
          return false;
      }
    }
  }

  return reader.close();
}

/// Parse the layers initial parameters
inline Boolean ParseLayersParams(
  String path_params, 
  io MkCNNLayerParams layers_params[], 
  io MkCNNLayerInterface layers[]) 
{
  TextReader reader();
  if(!reader.open(path_params))
    return false;

  while(!reader.eof()) 
  {
    MkCNNLayerParams layer_params;
    String line = reader.readLine();

    // Pass comment
    if(line.length() <= 0) line = reader.readLine();
    if(line[0] == "#") line = reader.readLine();
 
    // If we hit a new layer
    if(line[0] == "[")
    {
      Index params_counter = 0;
      layer_params.name = line;

      line = reader.readLine();
      if(line.find("epsW=") > -1) {
        layer_params.epsW = ParseScalar("epsW=", line);
        params_counter ++; line = reader.readLine();
      }

      if(line.find("epsB=") > -1) {
        layer_params.epsB = ParseScalar("epsB=", line);
        params_counter ++; line = reader.readLine();  
      }

      if(line.find("momW=") > -1) {
        layer_params.momW = ParseScalar("momW=", line);
        params_counter ++; line = reader.readLine();  
      }

      if(line.find("momB=") > -1) {
        layer_params.momB = ParseScalar("momB=", line);
        params_counter ++; line = reader.readLine();  
      }

      if(line.find("wc=") > -1) {
        layer_params.wc = ParseScalar("wc=", line);
        params_counter ++; 
      }

      if(params_counter != 5) {
        report("\n" + layer_params.name);
        report("Error, wrong parameter order");
        return false;
      }
      else
        layers_params.push(layer_params);
    }
  }

  return reader.close();
}
/*                                              Loss functions                                    */
/**************************************************************************************************/

                                          /***********************/

/**************************************************************************************************/
/*                                          Activation functions                                  */
/// Class for network configuration 
struct MkCNNConfig {
  Index worker;
  Index gpu;
  Index epoch;
  Index optimizer;
  Index batch_size;
  Index loss_function;
  String layers_defs_path;
  String layers_params_path;
  String train_images_path;
  String test_images_path;
  String train_labels_path;
  String test_labels_path;
  String main_output_dir_path;
  String output_dir_path;
};

/// Return the loss function
public Index MkCNNConfig.lossFunction() {
  return this.loss_function;
}

/// Return the optimizer
public Index MkCNNConfig.optimizer() {
  return this.optimizer;
}

/// Return the number of training's epochs
public Index MkCNNConfig.epoch() {
  return this.epoch;
}

/// Return the batch size
public Index MkCNNConfig.batchSize() {
  return this.batch_size;
}

/// Parse the network configuration file
private Boolean MkCNNConfig.parse!(String config_path) {
  TextReader reader();

  if(!reader.open(config_path))
    return false;

  Index params_counter = 0;
 
  while(!reader.eof()) 
  {
    String line = reader.readLine();
  
    // Pass comment
    //if( line == "" ) line = reader.readLine();
    if( (line.length() > 0) && line[0] != "#") 
    {
      report(line);

      if(line.find("worker=") > -1) {
        this.worker = ParseInt("worker=", line);  
        params_counter ++;  
      }
      if(line.find("gpu=") > -1) {
        this.gpu = ParseInt("gpu=", line);  
        params_counter ++;  
      }
      if(line.find("nbEpoch=") > -1) {
        this.epoch = ParseInt("nbEpoch=", line);  
        params_counter ++;  
      }
      if(line.find("batchSize=") > -1) {
        this.batch_size = ParseInt("batch_size=", line);  
        params_counter ++;  
      }
      if(line.find("optimizer=") > -1) {
        this.optimizer = ParseInt("optimizer=", line);  
        params_counter ++;  
      }
      if(line.find("lossFunction=") > -1) {
        this.loss_function = ParseInt("lossFunction=", line);  
        params_counter ++;  
      }
      if(line.find("layersDefsPath=") > -1) {
        this.layers_defs_path = ParseStr("layersDefsPath=", line); 
        params_counter ++;  
      }
      if(line.find("layersParamsPath=") > -1) {
        this.layers_params_path = ParseStr("layersParamsPath=", line); 
        params_counter ++;  
      }
      if(line.find("trainImagesPath=") > -1) {
        this.train_images_path = ParseStr("trainImagesPath=", line); 
        params_counter ++;  
      }
      if(line.find("testImagesPath=") > -1) {
        this.test_images_path = ParseStr("testImagesPath=", line); 
        params_counter ++;  
      }
      if(line.find("trainLabelsPath=") > -1) {
        this.train_labels_path = ParseStr("trainLabelsPath=", line); 
        params_counter ++;  
      }
      if(line.find("testLabelsPath=") > -1) {
        this.test_labels_path = ParseStr("testLabelsPath=", line); 
        params_counter ++;  
      }
      if(line.find("outputDirPath=") > -1) {
        this.main_output_dir_path = ParseStr("outputDirPath=", line); 
        params_counter ++;  
      }
    }
  }

  if(params_counter != 13) {
    report("Error, wrong parameter order");
    return false;
  }
  else {
    report("worker        : " + this.worker);
    report("gpu           : " + this.gpu);
    report("nbEpochs      : " + this.epoch);
    report("optimizer     : " + this.optimizer);
    report("batchSize     : " + this.batch_size);
    report("lossFunction  : " + this.loss_function);
    report("");
    report("layersDefs    : " + this.layers_defs_path);
    report("layerParams   : " + this.layers_params_path);
    report("outputDir     : " + this.main_output_dir_path);
    report("");
    report("trainImages   : " + this.train_images_path);
    report("testImages    : " + this.test_images_path);
    report("trainLabels   : " + this.train_labels_path);
    report("testLabels    : " + this.test_labels_path);
  }

  return reader.close();
}

/// To-Do
/// Check if the layers inputs and Zoutputs sizes are correct
private Boolean MkCNNConfig.check(io MkCNNLayerInterface layers[]) {
  return true;
}

/// Crate a directory to save the network
private Boolean MkCNNConfig.initSaving!() {
  
  FileSystem file_system;
  if(!file_system.exists(this.main_output_dir_path)) 
    return false;

  String date_time;
  CurrentDateTime(date_time);
 
  FilePath file_path(this.main_output_dir_path);
  file_path.append(FilePath(date_time));
  this.output_dir_path = file_path.string(); 
  return file_system.createDirectory(file_path);
}

/// Configure the whole network form file, incuding the layers
public Boolean MkCNNConfig.config!(String config_path, io MkCNNLayerInterface layers[]) {

  report("\n\n\n-------------------- Configuration --------------------");
  report("\n------------ Network ------------\n");
  if(!this.parse(config_path))
    return false;

  report("\n\n------------ Layers ------------");
  MkCNNLayerParams layers_params[];
  if(!ParseLayersParams(this.layers_params_path, layers_params, layers)) return false;
  if(!ParseLayersDefs(this.layers_defs_path, layers_params, layers)) return false;
  if(!this.check(layers)) return false;

  return this.initSaving();
}

/// Save the layer weights
private Boolean MkCNNConfig.save(io TextWriter writer, Ref<MkCNNLayerInterface> layer) {
  writer.writeLine("\nname=" + layer.name());
  writer.writeLine("mode="+ layer.modeAsStr());
  writer.writeLine("w="+ layer.weights());
  writer.writeLine("b="+ layer.bias());
  return true;
}

/// Save the current network's layers
public Boolean MkCNNConfig.save(MkCNNLayers layers) {

  FileSystem file_system;
  if(!file_system.exists(this.output_dir_path)) 
    return false;

  FilePath file_path(this.output_dir_path);
  file_path.append("res.mlkl");

  TextWriter writer();
  if(!writer.open(file_path.string()))
    return false;

  for(Index l=0; l<layers.size(); ++l)
  {
    Ref<MkCNNLayerInterface> current_layer = layers.at(l);
    if(current_layer)
    {
      if(!this.save(writer, current_layer))
        return false;
    }
    else
      return false;
  }
  return writer.close();
}

/// Load a layer weigths
private Boolean MkCNNConfig.load(
  String name,
  io TextReader reader, 
  io Ref<MkCNNLayerInterface> layer) 
{
  String line = reader.readLine();
  if(line.find("mode=") > -1) {
    line = reader.readLine();
  }

  if(line.find("w=") > -1) {
    String data = ParseStr("w=", line); 
    data = data.subString(1, data.length()-2);
    String datas[] = data.split(",");

    Float64 w[]; w.resize(datas.size());
    for(Index i=0; i<w.size(); ++i)
      w[i] = Float64(datas[i].toScalar());
    layer.weights(w);
    line = reader.readLine();
  }

  if(line.find("b=") > -1) {
    String data = ParseStr("b=", line); 
    data = data.subString(1, data.length()-2);
    String datas[] = data.split(",");

    Float64 b[]; b.resize(datas.size());
    for(Index i=0; i<b.size(); ++i)
      b[i] = Float64(datas[i].toScalar());
    layer.bias(b);
  }

  return true;
}

/// Load the current network's layers
/// Has to be used after configuring the network
public Boolean MkCNNConfig.load(String path, io MkCNNLayers layers) {
  TextReader reader();
  if(!reader.open(path))
    return false;
  
  while(!reader.eof()) 
  {
    String line = reader.readLine();

    // Pass comment
    if(line[0] == "#") line = reader.readLine();
 
    // If we hit a new layer
    if(line.find("name=") > -1)
    {
      // Check the name to get the corresponding layer (a pointer on it)
      String name = ParseStr("name=", line);
      // For now we don't manage the data layer
      Ref<MkCNNLayerInterface> current_layer = null;
      if(name != "[data]")
      {  
        for(Index l=0; layers.size(); ++l)
        {
          if(layers.at(l).name() == name)
          {
            current_layer = layers.at(l);
            break;
          }
        }
      }

      if(current_layer)
      {
        if(!this.load(name, reader, current_layer))
          return false;
      }
    }
  }
  return reader.close();
}
/*                                              Loss functions                                    */
/**************************************************************************************************/

 